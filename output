digraph clusteroutput {
	graph [label=output]
	1 [label="import sys
import argparse
CLI = argparse.ArgumentParser()
CLI.add_argument('--lista', nargs='*', type=int, default=[])
args = CLI.parse_args()
tests = args.lista
def __init__(self, key):...
def insert(root, key):...
def inorder(root):...
r = Node(10)
r = insert(r, 6)
r = insert(r, 4)
r = insert(r, 8)
r = insert(r, 14)
r = insert(r, 12)
r = insert(r, 16)
"]
	"1_calls" [label="argparse.ArgumentParser
CLI.add_argument
CLI.parse_args
Node
insert
insert
insert
insert
insert
insert" shape=box]
	1 -> "1_calls" [label=calls style=dashed]
	25 [label="for x in tests:
"]
	26 [label="insert(r, x)
"]
	"26_calls" [label=insert shape=box]
	26 -> "26_calls" [label=calls style=dashed]
	26 -> 25 [label=""]
	25 -> 26 [label=tests]
	27 [label="inorder(r)
"]
	"27_calls" [label=inorder shape=box]
	27 -> "27_calls" [label=calls style=dashed]
	25 -> 27 [label=""]
	1 -> 25 [label=""]
	subgraph cluster__init__ {
		graph [label=__init__]
		3 [label="self.left = None
self.right = None
self.val = key
"]
	}
	subgraph clusterinsert {
		graph [label=insert]
		6 [label="if root is None:
"]
		7 [label="return Node(key)
"]
		6 -> 7 [label="root is None"]
		9 [label="if root.val == key:
"]
		10 [label="return root
"]
		9 -> 10 [label="root.val == key"]
		12 [label="if root.val < key:
"]
		13 [label="root.right = insert(root.right, key)
"]
		"13_calls" [label=insert shape=box]
		13 -> "13_calls" [label=calls style=dashed]
		8 [label="return root
"]
		13 -> 8 [label=""]
		12 -> 13 [label="root.val < key"]
		15 [label="root.left = insert(root.left, key)
"]
		"15_calls" [label=insert shape=box]
		15 -> "15_calls" [label=calls style=dashed]
		15 -> 8 [label=""]
		12 -> 15 [label="(root.val >= key)"]
		9 -> 12 [label="(root.val != key)"]
		6 -> 9 [label="(root is not None)"]
	}
	subgraph clusterinorder {
		graph [label=inorder]
		21 [label="if root:
"]
		22 [label="inorder(root.left)
print(root.val)
inorder(root.right)
"]
		"22_calls" [label="inorder
print
inorder" shape=box]
		22 -> "22_calls" [label=calls style=dashed]
		21 -> 22 [label=root]
	}
}
