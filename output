digraph clusteroutput {
	graph [label=output]
	1 [label="import sys
import argparse
CLI = argparse.ArgumentParser()
CLI.add_argument('--lista', nargs='*', type=int, default=[])
args = CLI.parse_args()
tests = args.lista
def __init__(self, key):...
def search(root, key):...
def insert(root, key):...
def inorder(root):...
r = Node(50)
r = insert(r, 30)
r = insert(r, 20)
r = insert(r, 40)
r = insert(r, 70)
r = insert(r, 60)
r = insert(r, 80)
"]
	"1_calls" [label="argparse.ArgumentParser
CLI.add_argument
CLI.parse_args
Node
insert
insert
insert
insert
insert
insert" shape=box]
	1 -> "1_calls" [label=calls style=dashed]
	35 [label="for x in tests:
"]
	36 [label="search(r, x)
"]
	"36_calls" [label=search shape=box]
	36 -> "36_calls" [label=calls style=dashed]
	36 -> 35 [label=""]
	35 -> 36 [label=tests]
	1 -> 35 [label=""]
	subgraph cluster__init__ {
		graph [label=__init__]
		3 [label="self.left = None
self.right = None
self.val = key
"]
	}
	subgraph clustersearch {
		graph [label=search]
		6 [label="if root is None or root.val == key:
"]
		7 [label="return root
"]
		6 -> 7 [label="root is None or root.val == key"]
		8 [label="if root.val < key:
"]
		10 [label="return search(root.right, key)
"]
		8 -> 10 [label="root.val < key"]
		11 [label="return search(root.left, key)
"]
		8 -> 11 [label="(root.val >= key)"]
		6 -> 8 [label="(not (root is None or root.val == key))"]
	}
	subgraph clusterinsert {
		graph [label=insert]
		16 [label="if root is None:
"]
		17 [label="return Node(key)
"]
		16 -> 17 [label="root is None"]
		19 [label="if root.val == key:
"]
		20 [label="return root
"]
		19 -> 20 [label="root.val == key"]
		22 [label="if root.val < key:
"]
		23 [label="root.right = insert(root.right, key)
"]
		"23_calls" [label=insert shape=box]
		23 -> "23_calls" [label=calls style=dashed]
		18 [label="return root
"]
		23 -> 18 [label=""]
		22 -> 23 [label="root.val < key"]
		25 [label="root.left = insert(root.left, key)
"]
		"25_calls" [label=insert shape=box]
		25 -> "25_calls" [label=calls style=dashed]
		25 -> 18 [label=""]
		22 -> 25 [label="(root.val >= key)"]
		19 -> 22 [label="(root.val != key)"]
		16 -> 19 [label="(root is not None)"]
	}
	subgraph clusterinorder {
		graph [label=inorder]
		31 [label="if root:
"]
		32 [label="inorder(root.left)
print(root.val)
inorder(root.right)
"]
		"32_calls" [label="inorder
print
inorder" shape=box]
		32 -> "32_calls" [label=calls style=dashed]
		31 -> 32 [label=root]
	}
}
